name: Deploy Hello World

on:
  push:
    branches: [ "main" ]
    paths: "scripts/hello-world.ps1"

  pull_request:
    branches: [ "main" ]
    paths: "scripts/hello-world.ps1"

  workflow_dispatch:

permissions:
  id-token: write

env:
  automationAccountName: att-demo
  resourceGroupName: rg-att-demo
  runbookName: Hello-World
  script: hello-world.ps1

jobs:
  deploy:
    name: Deploy Script
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: Debug
        run: |
          dir
          dir ./scripts


      # Azure CLI Approach

      # Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v1
        if: false
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Script to Azure Automation as a Runbook
        if: false
        uses: azure/cli@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az config set defaults.group=${{ env.resourceGroupName }}
            az automation runbook replace-content --automation-account-name ${{ env.automationAccountName }} -n ${{ env.runbookName }} --content ./scripts/${{ env.script }}
            az automation runbook publish --automation-account-name ${{ env.automationAccountName }} -n ${{ env.runbookName }}
          
          
      # PowerShell Approach
      - name: Set up PowerShell module cache
        id: ps-module-cache
        uses: actions/cache@v3
        with:
          path: "~/.local/share/powershell/Modules"
          key: ${{ runner.os }}-az-automation
      
      - name: Install Az.Automation PowerShell module
        if: steps.ps-module-cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module Az.Automation

      - name: Deploy Script to Azure Automation as a Runbook
        #if: false
        shell: pwsh
        run: |
          echo "Deploying ${{ env.script }} to Azure Automation as a Runbook"
          $username = "${{ vars.AZURE_CLIENT_ID }}"
          $password = ${env:CLIENT_SECRET} | ConvertTo-SecureString -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential($username, $password)
          Connect-AzAccount -ServicePrincipal -Tenant ${{ vars.AZURE_TENANT_ID }} -Credential $credential
          Import-AzAutomationRunbook -Path ./scripts/${{ env.script }} -Name ${{ env.runbookName }} -Type PowerShell -AutomationAccountName ${{ env.automationAccountName }} -ResourceGroupName ${{ env.resourceGroupName }} -Force
          Publish-AzAutomationRunbook -Name ${{ env.runbookName }} -AutomationAccountName ${{ env.automationAccountName }} -ResourceGroupName ${{ env.resourceGroupName }}
        env:
          CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
